{"ast":null,"code":"import Relationship from \"../models/nodeRelationshipModel\";\nimport NodeClass from \"../models/nodeClassModel\";\nimport NodeField from '../models/nodeFieldModel';\nimport NodeMethod from '../models/nodeMethodModel';\nexport const preProcessJSONData = data => {\n  if (data.Children === null) return null;\n  const root = {\n    classList: [],\n    relationshipList: []\n  };\n  for (const child of data.Children) {\n    if (child.Type === 'Class') {\n      root.classList.push(preProcessClass(child));\n    } else if (child.Type === 'Relationship') {\n      root.relationshipList.push(preProcessRelationship(child));\n    }\n  }\n  return root;\n};\nconst preProcessClass = classObj => {\n  const name = classObj.Name;\n  const fields = [];\n  const methods = [];\n  if (classObj.Children !== null) {\n    for (const child of classObj.Children) {\n      if (child.Type === 'Field') {\n        fields.push(preProcessField(child));\n      } else if (child.Type === 'Method') {\n        methods.push(preProcessMethod(child));\n      }\n    }\n  }\n  return new NodeClass(name, fields, methods);\n};\nconst preProcessRelationship = relationshipObj => {\n  const type = relationshipObj.Type;\n  const source = relationshipObj.SourceClass;\n  const target = relationshipObj.TargetClass;\n  const leftLabel = relationshipObj.LeftLabel;\n  const middleLabel = relationshipObj.MiddleLabel;\n  const rightLabel = relationshipObj.RightLabel;\n  const relationship = new Relationship(type, source, target, leftLabel, middleLabel, rightLabel);\n  return relationship;\n};\nconst preProcessField = fieldObj => {\n  const name = fieldObj.Name;\n  const visiblity = fieldObj.Visibility;\n  const defaultValue = fieldObj.Default;\n  const valueType = fieldObj.ValueType;\n  return new NodeField(name, visiblity, defaultValue, valueType);\n};\nconst preProcessMethod = methodObj => {\n  const name = methodObj.Name;\n  const visibility = methodObj.Visibility;\n  const returnType = methodObj.ReturnType;\n  const parameters = [];\n  console.log(methodObj.Parameters);\n  if (methodObj.Parameters !== null) {\n    for (const parameter of methodObj.Parameters) {\n      parameters.push(preProcessField(parameter));\n    }\n  }\n  return new NodeMethod(name, visibility, parameters, returnType);\n};","map":{"version":3,"names":["Relationship","NodeClass","NodeField","NodeMethod","preProcessJSONData","data","Children","root","classList","relationshipList","child","Type","push","preProcessClass","preProcessRelationship","classObj","name","Name","fields","methods","preProcessField","preProcessMethod","relationshipObj","type","source","SourceClass","target","TargetClass","leftLabel","LeftLabel","middleLabel","MiddleLabel","rightLabel","RightLabel","relationship","fieldObj","visiblity","Visibility","defaultValue","Default","valueType","ValueType","methodObj","visibility","returnType","ReturnType","parameters","console","log","Parameters","parameter"],"sources":["C:/Users/kaden/Documents/Web Development/Luma/src/helper/preProcessNodeJSON.js"],"sourcesContent":["import Relationship from \"../models/nodeRelationshipModel\";\r\nimport NodeClass from \"../models/nodeClassModel\";\r\nimport NodeField from '../models/nodeFieldModel';\r\nimport NodeMethod from '../models/nodeMethodModel';\r\n\r\nexport const preProcessJSONData = (data) => {\r\n    if(data.Children === null) return null;\r\n\r\n    const root = {\r\n        classList: [],\r\n        relationshipList: [],\r\n    }\r\n\r\n    for(const child of data.Children){\r\n        if(child.Type === 'Class'){\r\n            root.classList.push(preProcessClass(child));\r\n        }\r\n        else if (child.Type === 'Relationship'){\r\n            root.relationshipList.push(preProcessRelationship(child));\r\n        }\r\n    }\r\n\r\n    return root;\r\n}\r\n\r\nconst preProcessClass = (classObj) => {\r\n    const name = classObj.Name;\r\n\r\n    const fields = [];\r\n    const methods = [];\r\n\r\n    if(classObj.Children !== null){\r\n        for(const child of classObj.Children){\r\n            if(child.Type === 'Field'){\r\n                fields.push(preProcessField(child)); \r\n            }\r\n            else if (child.Type === 'Method'){\r\n                methods.push(preProcessMethod(child));\r\n            }\r\n        }\r\n    }\r\n\r\n    return new NodeClass (name,fields,methods);\r\n}\r\n\r\nconst preProcessRelationship = (relationshipObj) => {\r\n    const type = relationshipObj.Type;\r\n    const source = relationshipObj.SourceClass;\r\n    const target = relationshipObj.TargetClass;\r\n    const leftLabel = relationshipObj.LeftLabel;\r\n    const middleLabel = relationshipObj.MiddleLabel;\r\n    const rightLabel = relationshipObj.RightLabel;\r\n\r\n    const relationship = new Relationship(type,source,target, leftLabel, middleLabel, rightLabel);\r\n\r\n    return relationship;\r\n}\r\n\r\nconst preProcessField = (fieldObj) => {\r\n    const name = fieldObj.Name;\r\n    const visiblity = fieldObj.Visibility;\r\n    const defaultValue = fieldObj.Default;\r\n    const valueType = fieldObj.ValueType;\r\n\r\n    return new NodeField(name,visiblity,defaultValue,valueType);\r\n}\r\n\r\nconst preProcessMethod = (methodObj) => {\r\n    const name = methodObj.Name;\r\n    const visibility = methodObj.Visibility;\r\n    const returnType = methodObj.ReturnType;\r\n    const parameters = [];\r\n\r\n    console.log(methodObj.Parameters)\r\n\r\n    if(methodObj.Parameters !== null){\r\n        for(const parameter of methodObj.Parameters){\r\n            parameters.push(preProcessField(parameter));\r\n        }    \r\n    }\r\n\r\n    return new NodeMethod (name,visibility,parameters,returnType);\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}