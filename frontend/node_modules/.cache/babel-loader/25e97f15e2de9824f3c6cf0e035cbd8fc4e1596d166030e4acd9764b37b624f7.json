{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kaden\\\\Documents\\\\Web Development\\\\Luma\\\\src\\\\components\\\\renderer.js\",\n  _s = $RefreshSig$();\nimport { useAppLayout } from \"../context/appLayoutContext\";\nimport '../styles/renderer.scss';\nimport { useRef } from 'react';\nimport Viewport from './viewport';\nimport Node from './node';\nimport PrerenderNode from \"./prerenderNode\";\nimport { RendererLayoutProvider } from '../context/rendererLayoutContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Renderer() {\n  return /*#__PURE__*/_jsxDEV(RendererLayoutProvider, {\n    children: /*#__PURE__*/_jsxDEV(RendererContent, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 9\n  }, this);\n}\n_c = Renderer;\nfunction RendererContent() {\n  _s();\n  const {\n    rendererHeight,\n    rendererWidth,\n    rootNode\n  } = useAppLayout();\n  let renderer = useRef(null);\n  let prerenderNode = useRef(null);\n  let prerenderData = {};\n\n  // prerender each node to calculate necessary width and height\n  for (const nodeData of rootNode.nodes) {\n    prerenderData = nodeData;\n    let width = prerenderNode.current.getBoundingClientRect().width;\n    let height = prerenderNode.current.getBoundingClientRect().height;\n    width /= scale;\n    nodeData.width = width;\n    nodeData.height = height;\n    console.log(width, height);\n  }\n  const rendererStyle = {\n    width: `${rendererWidth}vw`,\n    height: `${rendererHeight}vh`\n  };\n\n  // const overlayViewBox = `0 0 ${rendererWidth * window.innerWidth} ${rendererHeight * window.innerHeight}`;\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: renderer,\n    id: \"renderer\",\n    style: rendererStyle,\n    children: [/*#__PURE__*/_jsxDEV(Viewport, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"node-container\",\n      children: [/*#__PURE__*/_jsxDEV(PrerenderNode, {\n        data: prerenderData,\n        index: -1,\n        ref: prerenderNode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this), rootNode && rootNode.nodes.map((nodeData, i) => /*#__PURE__*/_jsxDEV(Node, {\n        data: nodeData,\n        index: nodeData.id\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 66\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n}\n_s(RendererContent, \"Pl0LTIEob16UPl0uroyMZgzmLzk=\", false, function () {\n  return [useAppLayout];\n});\n_c2 = RendererContent;\nexport default Renderer;\nvar _c, _c2;\n$RefreshReg$(_c, \"Renderer\");\n$RefreshReg$(_c2, \"RendererContent\");","map":{"version":3,"names":["useAppLayout","useRef","Viewport","Node","PrerenderNode","RendererLayoutProvider","jsxDEV","_jsxDEV","Renderer","children","RendererContent","fileName","_jsxFileName","lineNumber","columnNumber","_c","_s","rendererHeight","rendererWidth","rootNode","renderer","prerenderNode","prerenderData","nodeData","nodes","width","current","getBoundingClientRect","height","scale","console","log","rendererStyle","ref","id","style","data","index","map","i","_c2","$RefreshReg$"],"sources":["C:/Users/kaden/Documents/Web Development/Luma/src/components/renderer.js"],"sourcesContent":["import { useAppLayout } from \"../context/appLayoutContext\";\r\nimport '../styles/renderer.scss';\r\nimport { useRef } from 'react'\r\n\r\nimport Viewport from './viewport';\r\nimport Node from './node';\r\nimport PrerenderNode from \"./prerenderNode\";\r\n\r\nimport { RendererLayoutProvider } from '../context/rendererLayoutContext';\r\n\r\nfunction Renderer() {\r\n    return (\r\n        <RendererLayoutProvider>\r\n            <RendererContent />\r\n        </RendererLayoutProvider>\r\n    )\r\n}\r\n\r\nfunction RendererContent() {\r\n    const { rendererHeight, rendererWidth, rootNode } = useAppLayout();\r\n\r\n    let renderer = useRef(null);\r\n    let prerenderNode = useRef(null);\r\n    let prerenderData = {};\r\n\r\n    // prerender each node to calculate necessary width and height\r\n    for(const nodeData of rootNode.nodes){\r\n        prerenderData = nodeData;\r\n\r\n        let width = prerenderNode.current.getBoundingClientRect().width;\r\n        let height = prerenderNode.current.getBoundingClientRect().height;\r\n\r\n        width /= scale;\r\n\r\n\r\n        nodeData.width = width;\r\n        nodeData.height = height;\r\n\r\n        console.log(width, height);\r\n    }\r\n\r\n    const rendererStyle = {\r\n        width: `${rendererWidth}vw`,\r\n        height: `${rendererHeight}vh`,\r\n    }\r\n\r\n    // const overlayViewBox = `0 0 ${rendererWidth * window.innerWidth} ${rendererHeight * window.innerHeight}`;\r\n\r\n    return (\r\n        <div ref={renderer} id='renderer' style={rendererStyle}>\r\n            {/* <svg xmlns=\"http://www.w3.org/2000/svg\" preserveAspectRatio='xMidYMid meet' viewBox={overlayViewBox} id='relationship-overlay'></svg> */}\r\n            <Viewport></Viewport>\r\n\r\n            <div id='node-container'>\r\n                <PrerenderNode data={prerenderData} index={-1} ref={prerenderNode}/>\r\n                {rootNode && rootNode.nodes.map((nodeData, i) => <Node key={i} data={nodeData} index={nodeData.id} ></Node>)}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Renderer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}