{"ast":null,"code":"/**\n * @license MIT\n * @copyright 2020 Eyas Ranjous <eyas.ranjous@gmail.com>\n *\n * @class\n */\nclass Queue {\n  /**\n   * Creates a queue.\n   * @param {array} [elements]\n   */\n  constructor(elements) {\n    this._elements = Array.isArray(elements) ? elements : [];\n    this._offset = 0;\n  }\n\n  /**\n   * Adds an element to the back of the queue.\n   * @public\n   * @param {number|string|object} element\n   */\n  enqueue(element) {\n    this._elements.push(element);\n    return this;\n  }\n\n  /**\n   * Adds an element to the back of the queue.\n   * @public\n   * @param {number|string|object} element\n   */\n  push(element) {\n    return this.enqueue(element);\n  }\n\n  /**\n   * Dequeues the front element in the queue.\n   * @public\n   * @returns {number|string|object}\n   */\n  dequeue() {\n    if (this.size() === 0) return null;\n    const first = this.front();\n    this._offset += 1;\n    if (this._offset * 2 < this._elements.length) return first;\n\n    // only remove dequeued elements when reaching half size\n    // to decrease latency of shifting elements.\n    this._elements = this._elements.slice(this._offset);\n    this._offset = 0;\n    return first;\n  }\n\n  /**\n   * Dequeues the front element in the queue.\n   * @public\n   * @returns {number|string|object}\n   */\n  pop() {\n    return this.dequeue();\n  }\n\n  /**\n   * Returns the front element of the queue.\n   * @public\n   * @returns {number|string|object}\n   */\n  front() {\n    return this.size() > 0 ? this._elements[this._offset] : null;\n  }\n\n  /**\n   * Returns the back element of the queue.\n   * @public\n   * @returns {number|string|object}\n   */\n  back() {\n    return this.size() > 0 ? this._elements[this._elements.length - 1] : null;\n  }\n\n  /**\n   * Returns the number of elements in the queue.\n   * @public\n   * @returns {number}\n   */\n  size() {\n    return this._elements.length - this._offset;\n  }\n\n  /**\n   * Checks if the queue is empty.\n   * @public\n   * @returns {boolean}\n   */\n  isEmpty() {\n    return this.size() === 0;\n  }\n\n  /**\n   * Returns the remaining elements in the queue as an array.\n   * @public\n   * @returns {array}\n   */\n  toArray() {\n    return this._elements.slice(this._offset);\n  }\n\n  /**\n   * Clears the queue.\n   * @public\n   */\n  clear() {\n    this._elements = [];\n    this._offset = 0;\n  }\n\n  /**\n   * Creates a shallow copy of the queue.\n   * @public\n   * @return {Queue}\n   */\n  clone() {\n    return new Queue(this._elements.slice(this._offset));\n  }\n\n  /**\n   * Creates a queue from an existing array.\n   * @public\n   * @static\n   * @param {array} elements\n   * @return {Queue}\n   */\n  static fromArray(elements) {\n    return new Queue(elements);\n  }\n}\nexports.Queue = Queue;","map":{"version":3,"names":["Queue","constructor","elements","_elements","Array","isArray","_offset","enqueue","element","push","dequeue","size","first","front","length","slice","pop","back","isEmpty","toArray","clear","clone","fromArray","exports"],"sources":["C:/Users/kaden/Documents/Web Development/Luma/node_modules/@datastructures-js/queue/src/queue.js"],"sourcesContent":["/**\n * @license MIT\n * @copyright 2020 Eyas Ranjous <eyas.ranjous@gmail.com>\n *\n * @class\n */\nclass Queue {\n  /**\n   * Creates a queue.\n   * @param {array} [elements]\n   */\n  constructor(elements) {\n    this._elements = Array.isArray(elements) ? elements : [];\n    this._offset = 0;\n  }\n\n  /**\n   * Adds an element to the back of the queue.\n   * @public\n   * @param {number|string|object} element\n   */\n  enqueue(element) {\n    this._elements.push(element);\n    return this;\n  }\n\n  /**\n   * Adds an element to the back of the queue.\n   * @public\n   * @param {number|string|object} element\n   */\n  push(element) {\n    return this.enqueue(element);\n  }\n\n  /**\n   * Dequeues the front element in the queue.\n   * @public\n   * @returns {number|string|object}\n   */\n  dequeue() {\n    if (this.size() === 0) return null;\n\n    const first = this.front();\n    this._offset += 1;\n\n    if (this._offset * 2 < this._elements.length) return first;\n\n    // only remove dequeued elements when reaching half size\n    // to decrease latency of shifting elements.\n    this._elements = this._elements.slice(this._offset);\n    this._offset = 0;\n    return first;\n  }\n\n  /**\n   * Dequeues the front element in the queue.\n   * @public\n   * @returns {number|string|object}\n   */\n  pop() {\n    return this.dequeue();\n  }\n\n  /**\n   * Returns the front element of the queue.\n   * @public\n   * @returns {number|string|object}\n   */\n  front() {\n    return this.size() > 0 ? this._elements[this._offset] : null;\n  }\n\n  /**\n   * Returns the back element of the queue.\n   * @public\n   * @returns {number|string|object}\n   */\n  back() {\n    return this.size() > 0 ? this._elements[this._elements.length - 1] : null;\n  }\n\n  /**\n   * Returns the number of elements in the queue.\n   * @public\n   * @returns {number}\n   */\n  size() {\n    return this._elements.length - this._offset;\n  }\n\n  /**\n   * Checks if the queue is empty.\n   * @public\n   * @returns {boolean}\n   */\n  isEmpty() {\n    return this.size() === 0;\n  }\n\n  /**\n   * Returns the remaining elements in the queue as an array.\n   * @public\n   * @returns {array}\n   */\n  toArray() {\n    return this._elements.slice(this._offset);\n  }\n\n  /**\n   * Clears the queue.\n   * @public\n   */\n  clear() {\n    this._elements = [];\n    this._offset = 0;\n  }\n\n  /**\n   * Creates a shallow copy of the queue.\n   * @public\n   * @return {Queue}\n   */\n  clone() {\n    return new Queue(this._elements.slice(this._offset));\n  }\n\n  /**\n   * Creates a queue from an existing array.\n   * @public\n   * @static\n   * @param {array} elements\n   * @return {Queue}\n   */\n  static fromArray(elements) {\n    return new Queue(elements);\n  }\n}\n\nexports.Queue = Queue;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}