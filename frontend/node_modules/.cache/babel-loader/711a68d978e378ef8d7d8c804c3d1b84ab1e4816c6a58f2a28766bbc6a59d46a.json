{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kaden\\\\Documents\\\\Web Development\\\\Luma\\\\src\\\\components\\\\renderer.js\",\n  _s = $RefreshSig$();\nimport { useAppLayout } from \"../context/appLayoutContext\";\nimport '../styles/renderer.scss';\nimport { useRef } from 'react';\nimport Viewport from './viewport';\nimport { RendererLayoutProvider } from '../context/rendererLayoutContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Renderer() {\n  return /*#__PURE__*/_jsxDEV(RendererLayoutProvider, {\n    children: /*#__PURE__*/_jsxDEV(RendererContent, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 9\n  }, this);\n}\n_c = Renderer;\nfunction RendererContent() {\n  _s();\n  const {\n    rendererHeight,\n    rendererWidth,\n    rootNode\n  } = useAppLayout();\n  let renderer = useRef(null);\n  const adjList = new Map();\n  const calculateLayout = () => {\n    // possibility of having no root node on initial load\n    if (rootNode === null) return;\n\n    // possibility of having no nodes to render\n    if (rootNode.nodes === undefined) return;\n\n    // possibility of having no edges to render\n    if (rootNode.edges === undefined) return;\n\n    // build adj list\n    for (const node of rootNode.nodes) adjList.set(node.id, []);\n    for (const edge of rootNode.edges) adjList.get(edge.sourceId).push(edge.targetId);\n\n    // create level map for assigning vertical placement\n    const levels = createLevels();\n    console.log(levels);\n\n    // create clusters for assigning horizontal placement\n    const clusters = createClusters();\n    console.log(clusters);\n\n    // assign positions to nodes\n    assignPositions(levels, clusters);\n  };\n  const createLevels = () => {\n    const visited = new Set();\n    const levels = new Map();\n    const visit = (nodeId, currentLevel) => {\n      if (visited.has(nodeId)) return;\n      visited.add(nodeId);\n      levels.set(nodeId, Math.max(levels.get(nodeId) || 0, currentLevel));\n      for (const nei of adjList.get(nodeId) || []) {\n        visit(nei, currentLevel + 1);\n      }\n    };\n    for (const nodeId of adjList.keys()) {\n      visit(nodeId, 0);\n    }\n    return levels;\n  };\n  const createClusters = () => {\n    const clusters = [];\n    const visited = new Set();\n    const dfs = (nodeId, cluster) => {\n      if (visited.has(nodeId)) return;\n      visited.add(nodeId);\n      cluster.push(nodeId);\n      for (const edge of rootNode.edges) {\n        if (edge.sourceId === nodeId && !visited.has(edge.targetId)) {\n          dfs(edge.sourceId, cluster);\n        } else if (edge.targetId === nodeId && !visited.has(edge.targetId)) {\n          dfs(edge.targetId, cluster);\n        }\n      }\n    };\n    for (const node of rootNode.nodes) {\n      if (visited.has(node)) continue;\n      const cluster = [];\n      dfs(node, cluster);\n      clusters.push(cluster);\n    }\n    return clusters;\n  };\n  const assignPositions = () => {};\n  calculateLayout();\n  const rendererStyle = {\n    width: `${rendererWidth}vw`,\n    height: `${rendererHeight}vh`\n  };\n\n  // const overlayViewBox = `0 0 ${rendererWidth * window.innerWidth} ${rendererHeight * window.innerHeight}`;\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: renderer,\n    id: \"renderer\",\n    style: rendererStyle,\n    children: [/*#__PURE__*/_jsxDEV(Viewport, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"node-container\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 9\n  }, this);\n}\n_s(RendererContent, \"o8n8OckZ73WVV5gtlAnWR6YpwV8=\", false, function () {\n  return [useAppLayout];\n});\n_c2 = RendererContent;\nexport default Renderer;\nvar _c, _c2;\n$RefreshReg$(_c, \"Renderer\");\n$RefreshReg$(_c2, \"RendererContent\");","map":{"version":3,"names":["useAppLayout","useRef","Viewport","RendererLayoutProvider","jsxDEV","_jsxDEV","Renderer","children","RendererContent","fileName","_jsxFileName","lineNumber","columnNumber","_c","_s","rendererHeight","rendererWidth","rootNode","renderer","adjList","Map","calculateLayout","nodes","undefined","edges","node","set","id","edge","get","sourceId","push","targetId","levels","createLevels","console","log","clusters","createClusters","assignPositions","visited","Set","visit","nodeId","currentLevel","has","add","Math","max","nei","keys","dfs","cluster","rendererStyle","width","height","ref","style","_c2","$RefreshReg$"],"sources":["C:/Users/kaden/Documents/Web Development/Luma/src/components/renderer.js"],"sourcesContent":["import { useAppLayout } from \"../context/appLayoutContext\";\r\nimport '../styles/renderer.scss';\r\nimport { useRef } from 'react'\r\n\r\nimport Viewport from './viewport';\r\n\r\nimport { RendererLayoutProvider } from '../context/rendererLayoutContext';\r\n\r\nfunction Renderer() {\r\n    return (\r\n        <RendererLayoutProvider>\r\n            <RendererContent />\r\n        </RendererLayoutProvider>\r\n    )\r\n}\r\n\r\nfunction RendererContent() {\r\n    const { rendererHeight, rendererWidth, rootNode } = useAppLayout();\r\n\r\n    let renderer = useRef(null);\r\n\r\n    const adjList = new Map();\r\n\r\n\r\n    const calculateLayout = () => {\r\n        // possibility of having no root node on initial load\r\n        if(rootNode === null) return;\r\n\r\n        // possibility of having no nodes to render\r\n        if(rootNode.nodes === undefined) return;\r\n\r\n        // possibility of having no edges to render\r\n        if(rootNode.edges === undefined) return;\r\n\r\n        // build adj list\r\n        for(const node of rootNode.nodes) adjList.set(node.id, []);\r\n        for(const edge of rootNode.edges) adjList.get(edge.sourceId).push(edge.targetId);\r\n\r\n        // create level map for assigning vertical placement\r\n        const levels = createLevels();\r\n        console.log(levels);\r\n\r\n        // create clusters for assigning horizontal placement\r\n        const clusters = createClusters();\r\n        console.log(clusters);\r\n\r\n\r\n        // assign positions to nodes\r\n        assignPositions(levels, clusters);\r\n    }\r\n\r\n    const createLevels = () => {\r\n        const visited = new Set();\r\n        const levels = new Map();\r\n\r\n        const visit = (nodeId, currentLevel) => {\r\n            if(visited.has(nodeId)) return;\r\n            visited.add(nodeId);\r\n\r\n            levels.set(nodeId, Math.max(levels.get(nodeId) || 0, currentLevel));\r\n\r\n            for(const nei of adjList.get(nodeId) || []){\r\n                visit(nei, currentLevel + 1);\r\n            }\r\n        }\r\n        \r\n        for(const nodeId of adjList.keys()){\r\n            visit(nodeId, 0);\r\n        }\r\n\r\n        return levels;\r\n    }\r\n\r\n    const createClusters = () => {\r\n        const clusters = [];\r\n        const visited = new Set();\r\n\r\n        const dfs = (nodeId, cluster) => {\r\n            if(visited.has(nodeId)) return;\r\n\r\n            visited.add(nodeId);\r\n            cluster.push(nodeId);\r\n\r\n            for(const edge of rootNode.edges){\r\n                if(edge.sourceId === nodeId && !visited.has(edge.targetId)){\r\n                    dfs(edge.sourceId, cluster);\r\n                }\r\n                else if (edge.targetId === nodeId && !visited.has(edge.targetId)){\r\n                    dfs(edge.targetId, cluster);\r\n                }\r\n            }\r\n        }\r\n\r\n        for(const node of rootNode.nodes){\r\n            if(visited.has(node)) continue;\r\n\r\n            const cluster = [];\r\n            dfs(node, cluster);\r\n            clusters.push(cluster);\r\n        }\r\n\r\n        return clusters;\r\n    }\r\n\r\n    const assignPositions = () => {\r\n\r\n    }\r\n\r\n    calculateLayout();\r\n\r\n    const rendererStyle = {\r\n        width: `${rendererWidth}vw`,\r\n        height: `${rendererHeight}vh`,\r\n    }\r\n\r\n    // const overlayViewBox = `0 0 ${rendererWidth * window.innerWidth} ${rendererHeight * window.innerHeight}`;\r\n\r\n    return (\r\n        <div ref={renderer} id='renderer' style={rendererStyle}>\r\n            {/* <svg xmlns=\"http://www.w3.org/2000/svg\" preserveAspectRatio='xMidYMid meet' viewBox={overlayViewBox} id='relationship-overlay'></svg> */}\r\n            <Viewport></Viewport>\r\n\r\n            <div id='node-container'>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Renderer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}