{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kaden\\\\Documents\\\\Web Development\\\\Luma\\\\src\\\\components\\\\renderer.js\",\n  _s = $RefreshSig$();\nimport { useAppLayout } from \"../context/appLayoutContext\";\nimport '../styles/renderer.scss';\nimport { useRef } from 'react';\nimport Viewport from './viewport';\nimport Node from './node';\nimport { RendererLayoutProvider } from '../context/rendererLayoutContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Renderer() {\n  return /*#__PURE__*/_jsxDEV(RendererLayoutProvider, {\n    children: /*#__PURE__*/_jsxDEV(RendererContent, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 9\n  }, this);\n}\n_c = Renderer;\nfunction RendererContent() {\n  _s();\n  const {\n    rendererHeight,\n    rendererWidth,\n    rootNode\n  } = useAppLayout();\n  let renderer = useRef(null);\n  let testNode = useRef(null);\n  const testNodeData = {};\n\n  // Calculate necessary width to accomadate node text\n\n  console.log(calculateWidth(rootNode.nodes[0]));\n  const adjList = new Map();\n  const HORIZONTAL_MARGIN = 150;\n  const VERTICAL_MARGIN = 150;\n  const CLUSTER_MARGIN = 200;\n  const nodeIdToNode = new Map();\n  for (const node of rootNode.nodes) nodeIdToNode.set(node.id, node);\n  const calculateLayout = () => {\n    // possibility of having no root node on initial load\n    if (rootNode === null) return;\n\n    // possibility of having no nodes to render\n    if (rootNode.nodes === undefined) return;\n\n    // possibility of having no edges to render\n    if (rootNode.edges === undefined) return;\n\n    // build adj list\n    for (const node of rootNode.nodes) adjList.set(node.id, []);\n    for (const edge of rootNode.edges) adjList.get(edge.sourceId).push(edge.targetId);\n\n    // create level map for assigning vertical placement\n    const levels = createLevels();\n    console.log(levels);\n\n    // assign positions to nodes\n    assignPositions(levels);\n  };\n  const createLevels = () => {\n    const visited = new Set();\n    const levels = new Map();\n    const visit = (nodeId, currentLevel) => {\n      if (visited.has(nodeId)) return;\n      visited.add(nodeId);\n      levels.set(nodeId, Math.max(levels.get(nodeId) || 0, currentLevel));\n      for (const neiId of adjList.get(nodeId) || []) {\n        visit(neiId, currentLevel + 1);\n      }\n    };\n    for (const nodeId of adjList.keys()) {\n      visit(nodeId, 0);\n    }\n    return levels;\n  };\n  const createClusters = () => {\n    const clusters = [];\n    const visited = new Set();\n    const dfs = (nodeId, cluster) => {\n      if (visited.has(nodeId)) return;\n      visited.add(nodeId);\n      cluster.push(nodeId);\n      for (const edge of rootNode.edges) {\n        if (edge.sourceId === nodeId && !visited.has(edge.targetId)) {\n          dfs(edge.sourceId, cluster);\n        } else if (edge.targetId === nodeId && !visited.has(edge.targetId)) {\n          dfs(edge.targetId, cluster);\n        }\n      }\n    };\n    for (const node of rootNode.nodes) {\n      if (visited.has(node.id)) continue;\n      const cluster = [];\n      dfs(node.id, cluster);\n      clusters.push(cluster);\n    }\n    return clusters;\n  };\n  const assignPositions = (levels, clusters) => {\n    // group nodes by levels\n    const levelToNodes = new Map();\n    for (const node of rootNode.nodes) {\n      const level = levels.get(node.id);\n      if (!levelToNodes.has(level)) levelToNodes.set(level, []);\n      levelToNodes.get(level).push(node.id);\n    }\n\n    // assign positions level by level\n\n    for (const [level, nodes] of levelToNodes) {\n      let y = level * VERTICAL_MARGIN;\n      let xOffset = 0;\n      for (const nodeId of nodes) nodeIdToNode.get(nodeId).y = y;\n      const clusters = createClusters(nodes);\n      for (const cluster of clusters) {\n        for (const nodeId of cluster) {\n          nodeIdToNode.get(nodeId).x = xOffset;\n          xOffset += HORIZONTAL_MARGIN;\n        }\n      }\n    }\n  };\n  calculateLayout();\n  const rendererStyle = {\n    width: `${rendererWidth}vw`,\n    height: `${rendererHeight}vh`\n  };\n\n  // const overlayViewBox = `0 0 ${rendererWidth * window.innerWidth} ${rendererHeight * window.innerHeight}`;\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: renderer,\n    id: \"renderer\",\n    style: rendererStyle,\n    children: [/*#__PURE__*/_jsxDEV(Viewport, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"node-container\",\n      children: [/*#__PURE__*/_jsxDEV(Node, {\n        ref: testNode,\n        data: testNodeData,\n        index: -1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 17\n      }, this), rootNode && rootNode.nodes.map((nodeData, i) => /*#__PURE__*/_jsxDEV(Node, {\n        data: nodeData,\n        index: nodeData.id\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 66\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 156,\n    columnNumber: 9\n  }, this);\n}\n_s(RendererContent, \"1kVdQtawj//7IT6QB5lpTDsHjo8=\", false, function () {\n  return [useAppLayout];\n});\n_c2 = RendererContent;\nexport default Renderer;\nvar _c, _c2;\n$RefreshReg$(_c, \"Renderer\");\n$RefreshReg$(_c2, \"RendererContent\");","map":{"version":3,"names":["useAppLayout","useRef","Viewport","Node","RendererLayoutProvider","jsxDEV","_jsxDEV","Renderer","children","RendererContent","fileName","_jsxFileName","lineNumber","columnNumber","_c","_s","rendererHeight","rendererWidth","rootNode","renderer","testNode","testNodeData","console","log","calculateWidth","nodes","adjList","Map","HORIZONTAL_MARGIN","VERTICAL_MARGIN","CLUSTER_MARGIN","nodeIdToNode","node","set","id","calculateLayout","undefined","edges","edge","get","sourceId","push","targetId","levels","createLevels","assignPositions","visited","Set","visit","nodeId","currentLevel","has","add","Math","max","neiId","keys","createClusters","clusters","dfs","cluster","levelToNodes","level","y","xOffset","x","rendererStyle","width","height","ref","style","data","index","map","nodeData","i","_c2","$RefreshReg$"],"sources":["C:/Users/kaden/Documents/Web Development/Luma/src/components/renderer.js"],"sourcesContent":["import { useAppLayout } from \"../context/appLayoutContext\";\r\nimport '../styles/renderer.scss';\r\nimport { useRef } from 'react'\r\n\r\nimport Viewport from './viewport';\r\nimport Node from './node';\r\n\r\nimport { RendererLayoutProvider } from '../context/rendererLayoutContext';\r\n\r\nfunction Renderer() {\r\n    return (\r\n        <RendererLayoutProvider>\r\n            <RendererContent />\r\n        </RendererLayoutProvider>\r\n    )\r\n}\r\n\r\nfunction RendererContent() {\r\n    const { rendererHeight, rendererWidth, rootNode } = useAppLayout();\r\n\r\n    let renderer = useRef(null);\r\n    let testNode = useRef(null);\r\n\r\n    const testNodeData = {};\r\n\r\n    // Calculate necessary width to accomadate node text\r\n\r\n    console.log(calculateWidth(rootNode.nodes[0]))\r\n\r\n    const adjList = new Map();\r\n\r\n    const HORIZONTAL_MARGIN = 150;\r\n    const VERTICAL_MARGIN = 150;\r\n    const CLUSTER_MARGIN = 200;    \r\n\r\n    const nodeIdToNode = new Map();\r\n\r\n    for(const node of rootNode.nodes) nodeIdToNode.set(node.id, node);        \r\n\r\n    const calculateLayout = () => {\r\n        // possibility of having no root node on initial load\r\n        if(rootNode === null) return;\r\n\r\n        // possibility of having no nodes to render\r\n        if(rootNode.nodes === undefined) return;\r\n\r\n        // possibility of having no edges to render\r\n        if(rootNode.edges === undefined) return;\r\n\r\n        // build adj list\r\n        for(const node of rootNode.nodes) adjList.set(node.id, []);\r\n        for(const edge of rootNode.edges) adjList.get(edge.sourceId).push(edge.targetId);\r\n\r\n        // create level map for assigning vertical placement\r\n        const levels = createLevels();\r\n\r\n        console.log(levels);\r\n\r\n        // assign positions to nodes\r\n        assignPositions(levels);\r\n    }\r\n\r\n    const createLevels = () => {\r\n        const visited = new Set();\r\n        const levels = new Map();\r\n\r\n        const visit = (nodeId, currentLevel) => {\r\n            if(visited.has(nodeId)) return;\r\n            visited.add(nodeId);\r\n\r\n            levels.set(nodeId, Math.max(levels.get(nodeId) || 0, currentLevel));\r\n\r\n            for(const neiId of adjList.get(nodeId) || []){\r\n                visit(neiId, currentLevel + 1);\r\n            }\r\n        }\r\n        \r\n        for(const nodeId of adjList.keys()){\r\n            visit(nodeId, 0);\r\n        }\r\n\r\n        return levels;\r\n    }\r\n\r\n    const createClusters = () => {\r\n        const clusters = [];\r\n        const visited = new Set();\r\n\r\n        const dfs = (nodeId, cluster) => {\r\n            if(visited.has(nodeId)) return;\r\n\r\n            visited.add(nodeId);\r\n            cluster.push(nodeId);\r\n\r\n            for(const edge of rootNode.edges){\r\n                if(edge.sourceId === nodeId && !visited.has(edge.targetId)){\r\n                    dfs(edge.sourceId, cluster);\r\n                }\r\n                else if (edge.targetId === nodeId && !visited.has(edge.targetId)){\r\n                    dfs(edge.targetId, cluster);\r\n                }\r\n            }\r\n        }\r\n\r\n        for(const node of rootNode.nodes){\r\n            if(visited.has(node.id)) continue;\r\n\r\n            const cluster = [];\r\n            dfs(node.id, cluster);\r\n            clusters.push(cluster);\r\n        }\r\n\r\n        return clusters;\r\n    }\r\n\r\n    const assignPositions = (levels, clusters) => {\r\n\r\n        // group nodes by levels\r\n        const levelToNodes = new Map();\r\n\r\n        for(const node of rootNode.nodes){\r\n            const level = levels.get(node.id);\r\n            \r\n            if(!levelToNodes.has(level)) levelToNodes.set(level, []);\r\n            levelToNodes.get(level).push(node.id);\r\n        }\r\n\r\n        // assign positions level by level\r\n\r\n        for(const [level, nodes] of levelToNodes){\r\n            let y = level * VERTICAL_MARGIN;\r\n            let xOffset = 0;\r\n            for(const nodeId of nodes) nodeIdToNode.get(nodeId).y = y\r\n\r\n            const clusters = createClusters(nodes);\r\n\r\n            for(const cluster of clusters){\r\n                for(const nodeId of cluster){\r\n                    nodeIdToNode.get(nodeId).x = xOffset;\r\n                    xOffset += HORIZONTAL_MARGIN;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    calculateLayout();\r\n\r\n    const rendererStyle = {\r\n        width: `${rendererWidth}vw`,\r\n        height: `${rendererHeight}vh`,\r\n    }\r\n\r\n    // const overlayViewBox = `0 0 ${rendererWidth * window.innerWidth} ${rendererHeight * window.innerHeight}`;\r\n\r\n    return (\r\n        <div ref={renderer} id='renderer' style={rendererStyle}>\r\n            {/* <svg xmlns=\"http://www.w3.org/2000/svg\" preserveAspectRatio='xMidYMid meet' viewBox={overlayViewBox} id='relationship-overlay'></svg> */}\r\n            <Viewport></Viewport>\r\n\r\n            <div id='node-container'>\r\n                <Node ref={testNode} data={testNodeData} index={-1}></Node>\r\n                {rootNode && rootNode.nodes.map((nodeData, i) => <Node key={i} data={nodeData} index={nodeData.id} ></Node>)}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Renderer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}