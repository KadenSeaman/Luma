{"ast":null,"code":"import Edge from \"../models/edgeModel\";\nimport Node from \"../models/nodeModel\";\nimport Field from '../models/fieldModel';\nimport Method from '../models/methodModel';\nexport const preProcessJSONData = data => {\n  if (data.Children === null) return null;\n  const root = {\n    nodes: [],\n    edges: []\n  };\n  for (const child of data.Children) {\n    if (child.Type === 'Class') {\n      root.nodes.push(preProcessClass(child));\n    } else if (child.Type === 'Relationship') {\n      root.edges.push(preProcessRelationship(child));\n    }\n  }\n  return root;\n};\nconst preProcessClass = classObj => {\n  const name = classObj.Name;\n  const fields = [];\n  const methods = [];\n  if (classObj.Children !== null) {\n    for (const child of classObj.Children) {\n      if (child.Type === 'Field') {\n        fields.push(preProcessField(child));\n      } else if (child.Type === 'Method') {\n        methods.push(preProcessMethod(child));\n      }\n    }\n  }\n  return new Node(name, fields, methods);\n};\nconst preProcessRelationship = relationshipObj => {\n  const type = relationshipObj.Type;\n  const source = relationshipObj.SourceClass;\n  const target = relationshipObj.TargetClass;\n  const leftLabel = relationshipObj.LeftLabel;\n  const middleLabel = relationshipObj.MiddleLabel;\n  const rightLabel = relationshipObj.RightLabel;\n  return new Edge(type, source, target, leftLabel, middleLabel, rightLabel, 0, 0, 0, 0);\n};\nconst preProcessField = fieldObj => {\n  const name = fieldObj.Name;\n  const visiblity = fieldObj.Visibility;\n  const defaultValue = fieldObj.Default;\n  const valueType = fieldObj.ValueType;\n  return new Field(name, visiblity, defaultValue, valueType);\n};\nconst preProcessMethod = methodObj => {\n  const name = methodObj.Name;\n  const visibility = methodObj.Visibility;\n  const returnType = methodObj.ReturnType;\n  const parameters = [];\n  if (methodObj.Parameters !== null) {\n    for (const parameter of methodObj.Parameters) {\n      parameters.push(preProcessField(parameter));\n    }\n  }\n  return new Method(name, visibility, parameters, returnType);\n};","map":{"version":3,"names":["Edge","Node","Field","Method","preProcessJSONData","data","Children","root","nodes","edges","child","Type","push","preProcessClass","preProcessRelationship","classObj","name","Name","fields","methods","preProcessField","preProcessMethod","relationshipObj","type","source","SourceClass","target","TargetClass","leftLabel","LeftLabel","middleLabel","MiddleLabel","rightLabel","RightLabel","fieldObj","visiblity","Visibility","defaultValue","Default","valueType","ValueType","methodObj","visibility","returnType","ReturnType","parameters","Parameters","parameter"],"sources":["C:/Users/kaden/Documents/Web Development/Luma/frontend/src/helper/preProcessNodeJSON.js"],"sourcesContent":["import Edge from \"../models/edgeModel\";\r\nimport Node from \"../models/nodeModel\";\r\nimport Field from '../models/fieldModel';\r\nimport Method from '../models/methodModel';\r\n\r\nexport const preProcessJSONData = (data) => {\r\n    if(data.Children === null) return null;\r\n\r\n    const root = {\r\n        nodes: [],\r\n        edges: [],\r\n    }\r\n\r\n    for(const child of data.Children){\r\n        if(child.Type === 'Class'){\r\n            root.nodes.push(preProcessClass(child));\r\n        }\r\n        else if (child.Type === 'Relationship'){\r\n            root.edges.push(preProcessRelationship(child));\r\n        }\r\n    }\r\n\r\n    return root;\r\n}\r\n\r\nconst preProcessClass = (classObj) => {\r\n    const name = classObj.Name;\r\n\r\n    const fields = [];\r\n    const methods = [];\r\n\r\n    if(classObj.Children !== null){\r\n        for(const child of classObj.Children){\r\n            if(child.Type === 'Field'){\r\n                fields.push(preProcessField(child)); \r\n            }\r\n            else if (child.Type === 'Method'){\r\n                methods.push(preProcessMethod(child));\r\n            }\r\n        }\r\n    }\r\n\r\n    return new Node (name,fields,methods);\r\n}\r\n\r\nconst preProcessRelationship = (relationshipObj) => {\r\n    const type = relationshipObj.Type;\r\n    const source = relationshipObj.SourceClass;\r\n    const target = relationshipObj.TargetClass;\r\n    const leftLabel = relationshipObj.LeftLabel;\r\n    const middleLabel = relationshipObj.MiddleLabel;\r\n    const rightLabel = relationshipObj.RightLabel;\r\n\r\n    return new Edge(type, source, target, leftLabel, middleLabel, rightLabel, 0, 0, 0, 0);\r\n}\r\n\r\nconst preProcessField = (fieldObj) => {\r\n    const name = fieldObj.Name;\r\n    const visiblity = fieldObj.Visibility;\r\n    const defaultValue = fieldObj.Default;\r\n    const valueType = fieldObj.ValueType;\r\n\r\n    return new Field(name,visiblity,defaultValue,valueType);\r\n}\r\n\r\nconst preProcessMethod = (methodObj) => {\r\n    const name = methodObj.Name;\r\n    const visibility = methodObj.Visibility;\r\n    const returnType = methodObj.ReturnType;\r\n    const parameters = [];\r\n\r\n    if(methodObj.Parameters !== null){\r\n        for(const parameter of methodObj.Parameters){\r\n            parameters.push(preProcessField(parameter));\r\n        }    \r\n    }\r\n\r\n    return new Method (name,visibility,parameters,returnType);\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}