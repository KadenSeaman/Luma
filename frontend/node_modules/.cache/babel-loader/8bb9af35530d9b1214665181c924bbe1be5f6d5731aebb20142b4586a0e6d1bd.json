{"ast":null,"code":"import Relationship from \"../models/nodeRelationshipModel\";\nimport NodeClass from \"../models/nodeClassModel\";\nimport NodeField from '../models/nodeFieldModel';\nimport NodeMethod from '../models/nodeMethodModel';\nexport const preProcessJSONData = data => {\n  const nodeNameToId = new Map();\n  const relationshipNameToId = new Map();\n  let nodeCount = 0;\n  let edgeCount = 0;\n\n  // if root has no class or relationship children, return\n  if (data.Children === null) return null;\n  const root = {\n    nodeList: [],\n    edgeList: []\n  };\n\n  // loop through and gather all nodes\n  for (const child of data.Children) {\n    if (child.Type === 'Class') {\n      const id = `n${nodeCount}`;\n      const node = preProcessClass(child, id);\n      root.nodeList.push(node);\n      nodeNameToId.set(id, node);\n      nodeCount++;\n    }\n  }\n  // loop through and gather all edges\n  for (const child of data.Children) {\n    if (child.Type === 'Relationship') {\n      const sourceId = nodeNameToId.get(child.SourceClass);\n      const id = `e${edgeCount}`;\n      const edge = preProcessRelationship(child, id);\n      root.edgeList.push(edge);\n      edgeCount++;\n    }\n  }\n  return root;\n};\nconst preProcessClass = (classObj, id) => {\n  const name = classObj.Name;\n  const fields = [];\n  const methods = [];\n  if (classObj.Children !== null) {\n    for (const child of classObj.Children) {\n      if (child.Type === 'Field') {\n        fields.push(preProcessField(child));\n      } else if (child.Type === 'Method') {\n        methods.push(preProcessMethod(child));\n      }\n    }\n  }\n  return new NodeClass(id, name, fields, methods);\n};\nconst preProcessRelationship = relationshipObj => {\n  const type = relationshipObj.Type;\n  const source = relationshipObj.SourceClass;\n  const target = relationshipObj.TargetClass;\n  const leftLabel = relationshipObj.LeftLabel;\n  const middleLabel = relationshipObj.MiddleLabel;\n  const rightLabel = relationshipObj.RightLabel;\n  return new Relationship(type, source, target, leftLabel, middleLabel, rightLabel);\n};\nconst preProcessField = fieldObj => {\n  const name = fieldObj.Name;\n  const visiblity = fieldObj.Visibility;\n  const defaultValue = fieldObj.Default;\n  const valueType = fieldObj.ValueType;\n  return new NodeField(name, visiblity, defaultValue, valueType);\n};\nconst preProcessMethod = methodObj => {\n  const name = methodObj.Name;\n  const visibility = methodObj.Visibility;\n  const returnType = methodObj.ReturnType;\n  const parameters = [];\n  console.log(methodObj.Parameters);\n  if (methodObj.Parameters !== null) {\n    for (const parameter of methodObj.Parameters) {\n      parameters.push(preProcessField(parameter));\n    }\n  }\n  return new NodeMethod(name, visibility, parameters, returnType);\n};","map":{"version":3,"names":["Relationship","NodeClass","NodeField","NodeMethod","preProcessJSONData","data","nodeNameToId","Map","relationshipNameToId","nodeCount","edgeCount","Children","root","nodeList","edgeList","child","Type","id","node","preProcessClass","push","set","sourceId","get","SourceClass","edge","preProcessRelationship","classObj","name","Name","fields","methods","preProcessField","preProcessMethod","relationshipObj","type","source","target","TargetClass","leftLabel","LeftLabel","middleLabel","MiddleLabel","rightLabel","RightLabel","fieldObj","visiblity","Visibility","defaultValue","Default","valueType","ValueType","methodObj","visibility","returnType","ReturnType","parameters","console","log","Parameters","parameter"],"sources":["C:/Users/kaden/Documents/Web Development/Luma/src/helper/preProcessNodeJSON.js"],"sourcesContent":["import Relationship from \"../models/nodeRelationshipModel\";\r\nimport NodeClass from \"../models/nodeClassModel\";\r\nimport NodeField from '../models/nodeFieldModel';\r\nimport NodeMethod from '../models/nodeMethodModel';\r\n\r\n\r\n\r\nexport const preProcessJSONData = (data) => {\r\n    const nodeNameToId = new Map();\r\n    const relationshipNameToId = new Map();\r\n\r\n    let nodeCount = 0;\r\n    let edgeCount = 0;\r\n\r\n    // if root has no class or relationship children, return\r\n    if(data.Children === null) return null;\r\n\r\n\r\n    const root = {\r\n        nodeList: [],\r\n        edgeList: [],\r\n    }\r\n\r\n    // loop through and gather all nodes\r\n    for(const child of data.Children){\r\n        if(child.Type === 'Class'){\r\n            const id = `n${nodeCount}`;\r\n            const node = preProcessClass(child, id);\r\n\r\n            root.nodeList.push(node);\r\n            nodeNameToId.set(id, node);\r\n            nodeCount++;\r\n        }\r\n    }\r\n    // loop through and gather all edges\r\n    for(const child of data.Children){\r\n        if(child.Type === 'Relationship'){\r\n            const sourceId = nodeNameToId.get(child.SourceClass)\r\n\r\n\r\n            const id = `e${edgeCount}`;\r\n            const edge = preProcessRelationship(child,id);\r\n            root.edgeList.push(edge);\r\n            edgeCount++;\r\n        }\r\n    }\r\n\r\n    return root;\r\n}\r\n\r\nconst preProcessClass = (classObj, id) => {\r\n    const name = classObj.Name;\r\n    const fields = [];\r\n    const methods = [];\r\n\r\n    if(classObj.Children !== null){\r\n        for(const child of classObj.Children){\r\n            if(child.Type === 'Field'){\r\n                fields.push(preProcessField(child)); \r\n            }\r\n            else if (child.Type === 'Method'){\r\n                methods.push(preProcessMethod(child));\r\n            }\r\n        }\r\n    }\r\n\r\n    return new NodeClass (id,name,fields,methods);\r\n}\r\n\r\nconst preProcessRelationship = (relationshipObj) => {\r\n    const type = relationshipObj.Type;\r\n    const source = relationshipObj.SourceClass;\r\n    const target = relationshipObj.TargetClass;\r\n    const leftLabel = relationshipObj.LeftLabel;\r\n    const middleLabel = relationshipObj.MiddleLabel;\r\n    const rightLabel = relationshipObj.RightLabel;\r\n\r\n    return new Relationship(type,source,target, leftLabel, middleLabel, rightLabel);\r\n}\r\n\r\nconst preProcessField = (fieldObj) => {\r\n    const name = fieldObj.Name;\r\n    const visiblity = fieldObj.Visibility;\r\n    const defaultValue = fieldObj.Default;\r\n    const valueType = fieldObj.ValueType;\r\n\r\n    return new NodeField(name,visiblity,defaultValue,valueType);\r\n}\r\n\r\nconst preProcessMethod = (methodObj) => {\r\n    const name = methodObj.Name;\r\n    const visibility = methodObj.Visibility;\r\n    const returnType = methodObj.ReturnType;\r\n    const parameters = [];\r\n\r\n    console.log(methodObj.Parameters)\r\n\r\n    if(methodObj.Parameters !== null){\r\n        for(const parameter of methodObj.Parameters){\r\n            parameters.push(preProcessField(parameter));\r\n        }    \r\n    }\r\n\r\n    return new NodeMethod (name,visibility,parameters,returnType);\r\n}"],"mappings":"AAAA,OAAOA,YAAY,MAAM,iCAAiC;AAC1D,OAAOC,SAAS,MAAM,0BAA0B;AAChD,OAAOC,SAAS,MAAM,0BAA0B;AAChD,OAAOC,UAAU,MAAM,2BAA2B;AAIlD,OAAO,MAAMC,kBAAkB,GAAIC,IAAI,IAAK;EACxC,MAAMC,YAAY,GAAG,IAAIC,GAAG,CAAC,CAAC;EAC9B,MAAMC,oBAAoB,GAAG,IAAID,GAAG,CAAC,CAAC;EAEtC,IAAIE,SAAS,GAAG,CAAC;EACjB,IAAIC,SAAS,GAAG,CAAC;;EAEjB;EACA,IAAGL,IAAI,CAACM,QAAQ,KAAK,IAAI,EAAE,OAAO,IAAI;EAGtC,MAAMC,IAAI,GAAG;IACTC,QAAQ,EAAE,EAAE;IACZC,QAAQ,EAAE;EACd,CAAC;;EAED;EACA,KAAI,MAAMC,KAAK,IAAIV,IAAI,CAACM,QAAQ,EAAC;IAC7B,IAAGI,KAAK,CAACC,IAAI,KAAK,OAAO,EAAC;MACtB,MAAMC,EAAE,GAAG,IAAIR,SAAS,EAAE;MAC1B,MAAMS,IAAI,GAAGC,eAAe,CAACJ,KAAK,EAAEE,EAAE,CAAC;MAEvCL,IAAI,CAACC,QAAQ,CAACO,IAAI,CAACF,IAAI,CAAC;MACxBZ,YAAY,CAACe,GAAG,CAACJ,EAAE,EAAEC,IAAI,CAAC;MAC1BT,SAAS,EAAE;IACf;EACJ;EACA;EACA,KAAI,MAAMM,KAAK,IAAIV,IAAI,CAACM,QAAQ,EAAC;IAC7B,IAAGI,KAAK,CAACC,IAAI,KAAK,cAAc,EAAC;MAC7B,MAAMM,QAAQ,GAAGhB,YAAY,CAACiB,GAAG,CAACR,KAAK,CAACS,WAAW,CAAC;MAGpD,MAAMP,EAAE,GAAG,IAAIP,SAAS,EAAE;MAC1B,MAAMe,IAAI,GAAGC,sBAAsB,CAACX,KAAK,EAACE,EAAE,CAAC;MAC7CL,IAAI,CAACE,QAAQ,CAACM,IAAI,CAACK,IAAI,CAAC;MACxBf,SAAS,EAAE;IACf;EACJ;EAEA,OAAOE,IAAI;AACf,CAAC;AAED,MAAMO,eAAe,GAAGA,CAACQ,QAAQ,EAAEV,EAAE,KAAK;EACtC,MAAMW,IAAI,GAAGD,QAAQ,CAACE,IAAI;EAC1B,MAAMC,MAAM,GAAG,EAAE;EACjB,MAAMC,OAAO,GAAG,EAAE;EAElB,IAAGJ,QAAQ,CAAChB,QAAQ,KAAK,IAAI,EAAC;IAC1B,KAAI,MAAMI,KAAK,IAAIY,QAAQ,CAAChB,QAAQ,EAAC;MACjC,IAAGI,KAAK,CAACC,IAAI,KAAK,OAAO,EAAC;QACtBc,MAAM,CAACV,IAAI,CAACY,eAAe,CAACjB,KAAK,CAAC,CAAC;MACvC,CAAC,MACI,IAAIA,KAAK,CAACC,IAAI,KAAK,QAAQ,EAAC;QAC7Be,OAAO,CAACX,IAAI,CAACa,gBAAgB,CAAClB,KAAK,CAAC,CAAC;MACzC;IACJ;EACJ;EAEA,OAAO,IAAId,SAAS,CAAEgB,EAAE,EAACW,IAAI,EAACE,MAAM,EAACC,OAAO,CAAC;AACjD,CAAC;AAED,MAAML,sBAAsB,GAAIQ,eAAe,IAAK;EAChD,MAAMC,IAAI,GAAGD,eAAe,CAAClB,IAAI;EACjC,MAAMoB,MAAM,GAAGF,eAAe,CAACV,WAAW;EAC1C,MAAMa,MAAM,GAAGH,eAAe,CAACI,WAAW;EAC1C,MAAMC,SAAS,GAAGL,eAAe,CAACM,SAAS;EAC3C,MAAMC,WAAW,GAAGP,eAAe,CAACQ,WAAW;EAC/C,MAAMC,UAAU,GAAGT,eAAe,CAACU,UAAU;EAE7C,OAAO,IAAI5C,YAAY,CAACmC,IAAI,EAACC,MAAM,EAACC,MAAM,EAAEE,SAAS,EAAEE,WAAW,EAAEE,UAAU,CAAC;AACnF,CAAC;AAED,MAAMX,eAAe,GAAIa,QAAQ,IAAK;EAClC,MAAMjB,IAAI,GAAGiB,QAAQ,CAAChB,IAAI;EAC1B,MAAMiB,SAAS,GAAGD,QAAQ,CAACE,UAAU;EACrC,MAAMC,YAAY,GAAGH,QAAQ,CAACI,OAAO;EACrC,MAAMC,SAAS,GAAGL,QAAQ,CAACM,SAAS;EAEpC,OAAO,IAAIjD,SAAS,CAAC0B,IAAI,EAACkB,SAAS,EAACE,YAAY,EAACE,SAAS,CAAC;AAC/D,CAAC;AAED,MAAMjB,gBAAgB,GAAImB,SAAS,IAAK;EACpC,MAAMxB,IAAI,GAAGwB,SAAS,CAACvB,IAAI;EAC3B,MAAMwB,UAAU,GAAGD,SAAS,CAACL,UAAU;EACvC,MAAMO,UAAU,GAAGF,SAAS,CAACG,UAAU;EACvC,MAAMC,UAAU,GAAG,EAAE;EAErBC,OAAO,CAACC,GAAG,CAACN,SAAS,CAACO,UAAU,CAAC;EAEjC,IAAGP,SAAS,CAACO,UAAU,KAAK,IAAI,EAAC;IAC7B,KAAI,MAAMC,SAAS,IAAIR,SAAS,CAACO,UAAU,EAAC;MACxCH,UAAU,CAACpC,IAAI,CAACY,eAAe,CAAC4B,SAAS,CAAC,CAAC;IAC/C;EACJ;EAEA,OAAO,IAAIzD,UAAU,CAAEyB,IAAI,EAACyB,UAAU,EAACG,UAAU,EAACF,UAAU,CAAC;AACjE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}